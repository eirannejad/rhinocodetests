<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>1</Major>
          <Minor>0</Minor>
          <Revision>8</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">21989228-0aa5-4bc5-9448-e3b79fd43de9</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="4">
            <item name="Date" type_name="gh_date" type_code="8">638738281461440368</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="KeepOpen" type_name="gh_bool" type_code="1">false</item>
            <item name="Name" type_name="gh_string" type_code="10">test_large_script.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>247</X>
                  <Y>130</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">1.384083</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">1</item>
          </items>
          <chunks count="1">
            <chunk name="Library" index="0">
              <items count="4">
                <item name="Author" type_name="gh_string" type_code="10">Robert McNeel &amp; Associates</item>
                <item name="Id" type_name="gh_guid" type_code="9">00000000-0000-0000-0000-000000000000</item>
                <item name="Name" type_name="gh_string" type_code="10">Grasshopper</item>
                <item name="Version" type_name="gh_string" type_code="10">8.17.25030.1000</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">1</item>
          </items>
          <chunks count="1">
            <chunk name="Object" index="0">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">719467e6-7cf5-4848-99b0-c5dd57e5442c</item>
                <item name="Name" type_name="gh_string" type_code="10">Python 3 Script</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="15">
                    <item name="Description" type_name="gh_string" type_code="10"></item>
                    <item name="GraftStandardOutputLines" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8059dcc4-a701-416f-b32d-a4aadc366d9a</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="MarshGuids" type_name="gh_bool" type_code="1">true</item>
                    <item name="MarshInputs" type_name="gh_bool" type_code="1">true</item>
                    <item name="MarshOutputs" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Python 3 Script</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Py3</item>
                    <item name="ScriptComponentVersion" type_name="gh_int32" type_code="3">3</item>
                    <item name="Tooltip" type_name="gh_string" type_code="10"></item>
                    <item name="UsingLibraryInputParam" type_name="gh_bool" type_code="1">false</item>
                    <item name="UsingScriptInputParam" type_name="gh_bool" type_code="1">false</item>
                    <item name="UsingScriptOutputParam" type_name="gh_bool" type_code="1">false</item>
                    <item name="UsingStandardOutputParam" type_name="gh_bool" type_code="1">true</item>
                  </items>
                  <chunks count="4">
                    <chunk name="Attributes">
                      <items count="3">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>117</X>
                          <Y>84</Y>
                          <W>72</W>
                          <H>44</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>146</X>
                          <Y>106</Y>
                        </item>
                        <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="6">
                        <item name="InputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">08908df5-fa14-4982-9ab2-1aa0927566aa</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">08908df5-fa14-4982-9ab2-1aa0927566aa</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">08908df5-fa14-4982-9ab2-1aa0927566aa</item>
                      </items>
                      <chunks count="4">
                        <chunk name="InputParam" index="0">
                          <items count="13">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">rhinoscriptsyntax geometry</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">9faeda23-5b80-4229-addf-1747751402b5</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">x</item>
                            <item name="NickName" type_name="gh_string" type_code="10">x</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ScriptParameterVersion" type_name="gh_int32" type_code="3">2</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="ToolTip" type_name="gh_string" type_code="10"></item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">1c282eeb-dd16-439f-94e4-7d92b542fe8b</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>119</X>
                                  <Y>86</Y>
                                  <W>12</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>126.5</X>
                                  <Y>96</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                            <chunk name="ConverterData">
                              <items count="2">
                                <item name="AssemblyName" type_name="gh_string" type_code="10">System.Private.CoreLib</item>
                                <item name="TypeName" type_name="gh_string" type_code="10">System.Object</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="13">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">rhinoscriptsyntax geometry</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5e3b9eda-a833-4db9-a647-2d15f1a9dc17</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">y</item>
                            <item name="NickName" type_name="gh_string" type_code="10">y</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ScriptParameterVersion" type_name="gh_int32" type_code="3">2</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="ToolTip" type_name="gh_string" type_code="10"></item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">1c282eeb-dd16-439f-94e4-7d92b542fe8b</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>119</X>
                                  <Y>106</Y>
                                  <W>12</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>126.5</X>
                                  <Y>116</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                            <chunk name="ConverterData">
                              <items count="2">
                                <item name="AssemblyName" type_name="gh_string" type_code="10">System.Private.CoreLib</item>
                                <item name="TypeName" type_name="gh_string" type_code="10">System.Object</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Standard output and error contents collected during script run</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">81a81d0b-fab6-42f9-9a76-6b3cd959edad</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">out</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>161</X>
                                  <Y>86</Y>
                                  <W>26</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>174</X>
                                  <Y>96</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="13">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">false</item>
                            <item name="Description" type_name="gh_string" type_code="10">rhinoscriptsyntax geometry</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">74d74857-c867-479b-805a-ddd4520ae737</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">a</item>
                            <item name="NickName" type_name="gh_string" type_code="10">a</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ScriptParameterVersion" type_name="gh_int32" type_code="3">2</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="ToolTip" type_name="gh_string" type_code="10"></item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">1c282eeb-dd16-439f-94e4-7d92b542fe8b</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>161</X>
                                  <Y>106</Y>
                                  <W>26</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>174</X>
                                  <Y>116</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                            <chunk name="ConverterData">
                              <items count="2">
                                <item name="AssemblyName" type_name="gh_string" type_code="10">System.Private.CoreLib</item>
                                <item name="TypeName" type_name="gh_string" type_code="10">System.Object</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="Script">
                      <items count="5">
                        <item name="MarshGuids" type_name="gh_bool" type_code="1">true</item>
                        <item name="MarshInputs" type_name="gh_bool" type_code="1">true</item>
                        <item name="MarshOutputs" type_name="gh_bool" type_code="1">true</item>
                        <item name="Text" type_name="gh_string" type_code="10"></item>
                        <item name="Title" type_name="gh_string" type_code="10">Py3</item>
                      </items>
                      <chunks count="1">
                        <chunk name="LanguageSpec">
                          <items count="2">
                            <item name="Taxon" type_name="gh_string" type_code="10">*.*.python</item>
                            <item name="Version" type_name="gh_string" type_code="10">3.*</item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="ScriptEditor">
                      <items count="1">
                        <item name="StartBounds" type_name="gh_drawing_rectangle" type_code="34">
                          <X>1920</X>
                          <Y>189</Y>
                          <W>754</W>
                          <H>898</H>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="1134">iVBORw0KGgoAAAANSUhEUgAAAJYAAABkCAIAAADrOV6nAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAQDSURBVHhe7dldUxpnGMbxfNpO2siLwvKywLKuEIya1BDiCxWURYIYNG0OqqikatIDG1+r02oyRrK4u0Fk8hHSYUjbhJNw5l5w/eY+YHlm7pP/7MwzcOsWdYFPBOv/hFUCxITwmBAeE8JjQnhMCI8J4TEhPCaEx4TwmBAeE8JjQnhMCI8J4TEhPCaEx4TwmBAeE8JjQnhMCI8J4TEhPCaEx4TwmBAeE8JjQnhMCI8J4TEhPCaEx4TwmBAeE8JjQnhMCI8J4TEhPCaEZ9GEhmGYpmkaHY9pGobRvqU3WDGhfqmf/H2ye7i7f7Tf4ewd7h3/dXx5edm+qwdYLqGu65X3F9v7L/feHuye7X173jRn7+3B1v72+cV5D76LlktYv6oXnhYWy8X1kxelo42Vw7XV1hxvlE42Vo/WVw7Xml8era8erZf+3Fg5KP16UFo7Li9uLuUWcle1q/aN3c5aCev1enmj7HA6kqW0XIh4kt5I8V50eSRaHJEmBoPxsFKIDS0NR5dHAxlJmPYEMtLAhCuUlSPPRh6vTPe7nM9/ed5oNNr3djVrJazVajs7Ow6n48dnj6T8kGvSrSzGlOLw4FxUHAq4nK5YeiT285hSHPanA+4pwTXpdk8JUk5RlobHlscdA47N3zbr9Xr73q5mrYSapl3Xr1/9/krJRMOFiFy4Ky9GQ4mw2yP4ZTGohFK5dLI4E8or8kL0vwnnI9JCRJpTXmyWG9cNTdPa93Y1ayWsVqumYVYvq7GFUXE+HMopoQXFd0+MDkdzxSeZvJpVs/FsQszJzaMvJjAvD87fPa+cfzA/tG/sdpZL2LrOeCdFcT4sZmVRDXtnguO5+NLTpVQuPao+CKqDflUS1bCoNk8/TzYsTPmzT7K8ztyw1nXG5rDFCqOun7y2uMOTDnjmAsHsYFxNPFQfBVVZmBV9Gcn5eKBv3ObPSN7ZoHc26JkLDuVj9n47rzM3rFarvf7jtd1pF1NS/7Rwe+x7TzogpET3jN+V8rlSPveMX0iJnnSg76H9hwd3WqfNSYu+VMjmtG1vbV9d9daLaK2EmqY1Go2tl1u37/fZp1z2yQFnUnBMt8b974fmOJOCM+n58vG7+3dK5bWPjY+8ztwwXdc1TYvMxvoTgjDpFyZ8nUx/QpBnht5dvDN0/jpjAbquv69UTs9Oz96cdTinZ6eVi0oP9rNowlZF02j++dAh0zB1XW/f0hssmpA6x4TwmBAeE8JjQnhMCI8J4TEhPCaEx4TwmBAeE8JjQnhMCI8J4TEhPCaEx4TwmBAeE8JjQnhMCI8J4TEhPCaEx4TwmBAeE8JjQnhMCI8J4TEhPCaEx4TwmBAeE8JjQnhMCI8J4TEhvK8SEqjPCQnaP7R/knSrJ0oKAAAAAElFTkSuQmCC</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>