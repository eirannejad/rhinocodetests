// async: true
// r "Grasshopper"
// r "GH_IO"
using System;
using System.IO;
using System.Threading.Tasks;
using System.Collections.Generic;

using Rhino;

using Rhino.Runtime.Code;
using Rhino.Runtime.Code.Languages;
using Rhino.Runtime.Code.Execution;

using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

var gh = RhinoCode.Languages.QueryLatest(new LanguageSpec("*.*.grasshopper", "1"));
var code = gh.CreateCode(@"");

var input = new GH_Structure<GH_Integer>();
input.Append(new GH_Integer(21));

var output = new GH_Structure<GH_Integer>();

var ctx = new RunContext
{
  Inputs = {
        ["A"] = input,
        ["B"] = input,
    },
  Outputs = {
        ["C"] = output,
    },
  Options = {
        ["grasshopper.runAsCommand"] = false
    }
};

var ts = new List<Task>();

ts.Add(Task.Run(() => code.Run(ctx)));

Task.WaitAll(ts.ToArray());

if (ctx.Outputs.TryGet("C", out IGH_Structure data))
{
  foreach (var p in data.Paths)
  {
    foreach (var d in data.get_Branch(p))
      RhinoApp.WriteLine(d.ToString());
  }
}
