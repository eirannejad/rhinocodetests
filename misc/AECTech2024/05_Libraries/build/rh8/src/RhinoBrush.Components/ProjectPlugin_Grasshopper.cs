using System;
using System.IO;
using System.Text;
using SD = System.Drawing;

using Rhino;
using Grasshopper.Kernel;

namespace RhinoCodePlatform.Rhino3D.Projects.Plugin.GH
{
  public sealed class AssemblyInfo : GH_AssemblyInfo
  {
    static readonly string s_assemblyIconData = "[[ASSEMBLY-ICON]]";
    static readonly string s_categoryIconData = "[[ASSEMBLY-CATEGORY-ICON]]";

    public static readonly SD.Bitmap PluginIcon = default;
    public static readonly SD.Bitmap PluginCategoryIcon = default;

    static AssemblyInfo()
    {
      if (!s_assemblyIconData.Contains("ASSEMBLY-ICON"))
      {
        using (var aicon = new MemoryStream(Convert.FromBase64String(s_assemblyIconData)))
          PluginIcon = new SD.Bitmap(aicon);
      }

      if (!s_categoryIconData.Contains("ASSEMBLY-CATEGORY-ICON"))
      {
        using (var cicon = new MemoryStream(Convert.FromBase64String(s_categoryIconData)))
          PluginCategoryIcon = new SD.Bitmap(cicon);
      }
    }

    public override Guid Id { get; } = new Guid("f04026e8-2d17-485c-a219-764ef4cace69");

    public override string AssemblyName { get; } = "RhinoBrush.Components";
    public override string AssemblyVersion { get; } = "2.0.22257.9064";
    public override string AssemblyDescription { get; } = "";
    public override string AuthorName { get; } = "Ehsan Iran-Nejad";
    public override string AuthorContact { get; } = "ehsan@mcneel.com";
    public override GH_LibraryLicense AssemblyLicense { get; } = GH_LibraryLicense.unset;
    public override SD.Bitmap AssemblyIcon { get; } = PluginIcon;
  }

  public class ProjectComponentPlugin : GH_AssemblyPriority
  {
    static readonly Guid s_projectId = new Guid("f04026e8-2d17-485c-a219-764ef4cace69");
    static readonly string s_projectData = "ew0KICAiaG9zdCI6IHsNCiAgICAibmFtZSI6ICJSaGlubzNEIiwNCiAgICAidmVyc2lvbiI6ICI4LjEzLjI0Mjk2XHUwMDJCMTUwMDEiLA0KICAgICJvcyI6ICJ3aW5kb3dzIiwNCiAgICAiYXJjaCI6ICJ4NjQiDQogIH0sDQogICJpZCI6ICJmMDQwMjZlOC0yZDE3LTQ4NWMtYTIxOS03NjRlZjRjYWNlNjkiLA0KICAiaWRlbnRpdHkiOiB7DQogICAgIm5hbWUiOiAiUmhpbm9CcnVzaCIsDQogICAgInZlcnNpb24iOiAiMi4wIiwNCiAgICAicHVibGlzaGVyIjogew0KICAgICAgImVtYWlsIjogImVoc2FuQG1jbmVlbC5jb20iLA0KICAgICAgIm5hbWUiOiAiRWhzYW4gSXJhbi1OZWphZCIsDQogICAgICAiY29tcGFueSI6ICJNY05lZWwiLA0KICAgICAgInBob25lIjogIlx1MDAyQjEgKDg4OCktODg4IDg4ODgiLA0KICAgICAgImFkZHJlc3MiOiAiUGFjaWZpYyBOb3J0aHdlc3QiLA0KICAgICAgImNvdW50cnkiOiAiVVNBIg0KICAgIH0sDQogICAgImNvcHlyaWdodCI6ICJDb3B5cmlnaHQgXHUwMEE5IDIwMjQgRWhzYW4gSXJhbi1OZWphZCIsDQogICAgImxpY2Vuc2UiOiAiTUlUIg0KICB9LA0KICAic2V0dGluZ3MiOiB7DQogICAgImJ1aWxkUGF0aCI6ICJmaWxlOi8vL0M6L1VzZXJzL2Vpbi9MRU8tV1gvRG93bmxvYWRzL0FFQ1RlY2gyMDI0LzA1X0xpYnJhcmllcy9idWlsZC9yaDgiLA0KICAgICJidWlsZFRhcmdldCI6IHsNCiAgICAgICJob3N0Ijogew0KICAgICAgICAibmFtZSI6ICJSaGlubzNEIiwNCiAgICAgICAgInZlcnNpb24iOiAiOCINCiAgICAgIH0sDQogICAgICAidGl0bGUiOiAiUmhpbm8zRCAoOC4qKSIsDQogICAgICAic2x1ZyI6ICJyaDgiDQogICAgfSwNCiAgICAicHVibGlzaFRhcmdldCI6IHsNCiAgICAgICJ0aXRsZSI6ICJNY05lZWwgWWFrIFNlcnZlciINCiAgICB9DQogIH0sDQogICJjb2RlcyI6IFtdLA0KICAibGlicmFyaWVzIjogWw0KICAgIHsNCiAgICAgICJ0eXBlIjogInNvdXJjZSIsDQogICAgICAibGlicmFyeSI6IHsNCiAgICAgICAgIm5hbWUiOiAiQnJ1c2hUb29scyIsDQogICAgICAgICJsYW5ndWFnZSI6IHsNCiAgICAgICAgICAiaWQiOiAiKi4qLmNzaGFycCIsDQogICAgICAgICAgInZlcnNpb24iOiAiKi4qLioiDQogICAgICAgIH0sDQogICAgICAgICJiYXNlIjogInJoaW5vY29kZTovLy9jc2hhcnAvbGlicy9CcnVzaFRvb2xzLyIsDQogICAgICAgICJjb2RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAibGFuZ3VhZ2UiOiB7DQogICAgICAgICAgICAgICJpZCI6ICIqLiouY3NoYXJwIiwNCiAgICAgICAgICAgICAgInZlcnNpb24iOiAiKi4qLioiDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgInRpdGxlIjogIkJhc2VCcnVzaC5jcyIsDQogICAgICAgICAgICAidGV4dCI6ICJJM0lnSW01MVoyVjBPaUJGWVhOcGJtZEdkVzVqZEdsdmJuTXNJREV1TUM0eElncDFjMmx1WnlCVGVYTjBaVzA3Q25WemFXNW5JRk41YzNSbGJTNU1hVzV4T3dwMWMybHVaeUJUZVhOMFpXMHVRMjlzYkdWamRHbHZibk11UjJWdVpYSnBZenNLZFhOcGJtY2dVMFFnUFNCVGVYTjBaVzB1UkhKaGQybHVaenNLZFhOcGJtY2dSVVlnUFNCRmRHOHVSbTl5YlhNN0NncDFjMmx1WnlCU2FHbHVienNLZFhOcGJtY2dVbWhwYm04dVNXNXdkWFE3Q25WemFXNW5JRkpvYVc1dkxrbHVjSFYwTGtOMWMzUnZiVHNLZFhOcGJtY2dVbWhwYm04dVIyVnZiV1YwY25rN0NuVnphVzVuSUZKb2FXNXZMa1J2WTA5aWFtVmpkSE03Q25WemFXNW5JRkpvYVc1dkxrTnZiVzFoYm1Sek93b0tibUZ0WlhOd1lXTmxJRUp5ZFhOb1ZHOXZiSE1LZXdvZ0lDQWdjSFZpYkdsaklHRmljM1J5WVdOMElHTnNZWE56SUVKaGMyVkNjblZ6YUNBNklFZGxkRkJ2YVc1MENpQWdJQ0I3SUFvZ0lDQWdJQ0FnSUhKbFlXUnZibXg1SUdsdWRDQnphWHBsU1c1a1pYZzdDaUFnSUNBZ0lDQWdjbVZoWkc5dWJIa2dhVzUwSUdadmMybDZaVWx1WkdWNE93b2dJQ0FnSUNBZ0lISmxZV1J2Ym14NUlHbHVkQ0J6ZEhKbGJtZDBhRWx1WkdWNE93b2dJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lIQnliM1JsWTNSbFpDQmtiM1ZpYkdVZ2JWOXphWHBsT3dvZ0lDQWdJQ0FnSUhCeWIzUmxZM1JsWkNCa2IzVmliR1VnYlY5bVlXeHNiMlptT3dvZ0lDQWdJQ0FnSUhCeWIzUmxZM1JsWkNCa2IzVmliR1VnYlY5emRISmxibWQwYURzS0lDQWdJQ0FnSUNCd2NtOTBaV04wWldRZ1pHOTFZbXhsSUcxZmJXRjRWbUZzZFdVZ1BTQTJNQzR3WkRzS0lDQWdJQ0FnSUNCd2NtOTBaV04wWldRZ1pHOTFZbXhsSUcxZmJXbHVWbUZzZFdVZ1BTQXhMakJrT3dvZ0lDQWdJQ0FnSUhCeWIzUmxZM1JsWkNCaWIyOXNJRjl0YjNWelpVUnZkMjRnUFNCbVlXeHpaVHNLSUNBZ0lDQWdJQ0J3Y205MFpXTjBaV1FnUldGemFXNW5Ma1ZoYzJVZ2JWOWxZWE5sT3dvS0lDQWdJQ0FnSUNCd2RXSnNhV01nUW1GelpVSnlkWE5vS0dSdmRXSnNaU0J6YVhwbElEMGdOalF1TUdRc0lHUnZkV0pzWlNCbVlXeHNiMlptSUQwZ01USTRMakJrTENCa2IzVmliR1VnYzNSeVpXNW5kR2dnUFNBd0xqVmtLUW9nSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JWOXphWHBsSUQwZ2MybDZaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JWOW1ZV3hzYjJabUlEMGdabUZzYkc5bVpqc0tJQ0FnSUNBZ0lDQWdJQ0FnYlY5emRISmxibWQwYUNBOUlITjBjbVZ1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0J0WDJWaGMyVWdQU0J1WlhjZ1JXRnphVzVuTGxGMVlYSjBhV01vYm1WM0lFVmhjMmx1Wnk1V1pXTjBiM0lvUTI5dWRtVnlkQzVVYjFOcGJtZHNaU2h0WDJaaGJHeHZabVlwTENCRGIyNTJaWEowTGxSdlUybHVaMnhsS0cxZmMzUnlaVzVuZEdncEtTazdDZ29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbE5sZEVOdmJXMWhibVJRY205dGNIUW9JbEJoYVc1MElpazdDZ29nSUNBZ0lDQWdJQ0FnSUNCMllYSWdiM0IwYzJsNlpXUnZkV0pzWlNBOUlHNWxkeUJQY0hScGIyNUViM1ZpYkdVb2JWOXphWHBsTENBeExDQXlOVFlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjNCMFptRnNiRzltWm1SdmRXSnNaU0E5SUc1bGR5QlBjSFJwYjI1RWIzVmliR1VvYlY5bVlXeHNiMlptTENBeExDQXlOVFlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjNCMGMzUnlaVzVuZEdoa2IzVmliR1VnUFNCdVpYY2dUM0IwYVc5dVJHOTFZbXhsS0cxZmMzUnlaVzVuZEdnc0lEQXVNU3dnTVRZcE93b2dJQ0FnSUNBZ0lDQWdJQ0J6YVhwbFNXNWtaWGdnUFNCMGFHbHpMa0ZrWkU5d2RHbHZia1J2ZFdKc1pTZ2lRbkoxYzJoVGFYcGxJaXdnY21WbUlHOXdkSE5wZW1Wa2IzVmliR1VzSUNKRmJuUmxjaUJDY25WemFDQlRhWHBsSWlrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2YzJsNlpVbHVaR1Y0SUQwZ2RHaHBjeTVCWkdSUGNIUnBiMjVFYjNWaWJHVW9Ja1poYkd4dlptWlRhWHBsSWl3Z2NtVm1JRzl3ZEdaaGJHeHZabVprYjNWaWJHVXNJQ0pGYm5SbGNpQkdZV3hzYjJabUlGTnBlbVVpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjM1J5Wlc1bmRHaEpibVJsZUNBOUlIUm9hWE11UVdSa1QzQjBhVzl1Ukc5MVlteGxLQ0pUZEhKbGJtZDBhQ0lzSUhKbFppQnZjSFJ6ZEhKbGJtZDBhR1J2ZFdKc1pTd2dJa1Z1ZEdWeUlFSnlkWE5vSUZOMGNtVnVaM1JvSWlrN0NpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQndkV0pzYVdNZ2RtOXBaQ0JFYjFCaGFXNTBLQ2tLSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFZGxkRkpsYzNWc2RDQnlaWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lHUnZJQW9nSUNBZ0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0IwYUdsekxrZGxkQ2h2YmsxdmRYTmxWWEE2SUhSeWRXVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0lDaHlaWE1wQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JIWlhSU1pYTjFiSFF1VDNCMGFXOXVPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjNCMElEMGdkR2hwY3k1UGNIUnBiMjRvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXdkQzVKYm1SbGVDQTlQU0J6YVhwbFNXNWtaWGdwQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxZmMybDZaU0E5SUc5d2RDNURkWEp5Wlc1MFRuVnRaWEpwWTFaaGJIVmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHOXdkQzVKYm1SbGVDQTlQU0JtYjNOcGVtVkpibVJsZUNrS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JWOW1ZV3hzYjJabUlEMGdiM0IwTGtOMWNuSmxiblJPZFcxbGNtbGpWbUZzZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvYjNCMExrbHVaR1Y0SUQwOUlITjBjbVZ1WjNSb1NXNWtaWGdwQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxZmMzUnlaVzVuZEdnZ1BTQnZjSFF1UTNWeWNtVnVkRTUxYldWeWFXTldZV3gxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVjlsWVhObElEMGdibVYzSUVWaGMybHVaeTVSZFdGeWRHbGpLRzVsZHlCRllYTnBibWN1Vm1WamRHOXlLRU52Ym5abGNuUXVWRzlUYVc1bmJHVW9iVjltWVd4c2IyWm1LU3dnUTI5dWRtVnlkQzVVYjFOcGJtZHNaU2h0WDNOMGNtVnVaM1JvS1NrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JIWlhSU1pYTjFiSFF1VUc5cGJuUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1J2SUhSb1pTQjBhR2x1WjNNS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwZ2QyaHBiR1VnS0hKbGN5QWhQU0JIWlhSU1pYTjFiSFF1UTJGdVkyVnNLVHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUhCeWIzUmxZM1JsWkNCdmRtVnljbWxrWlNCMmIybGtJRTl1VFc5MWMyVk5iM1psS0VkbGRGQnZhVzUwVFc5MWMyVkZkbVZ1ZEVGeVozTWdaU2tLSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lGOXRiM1Z6WlVSdmQyNGdQU0JsTGt4bFpuUkNkWFIwYjI1RWIzZHVPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnY0hKdmRHVmpkR1ZrSUc5MlpYSnlhV1JsSUhadmFXUWdUMjVFZVc1aGJXbGpSSEpoZHloSFpYUlFiMmx1ZEVSeVlYZEZkbVZ1ZEVGeVozTWdaU2tLSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsTGxacFpYZHdiM0owSUdseklHNTFiR3dwQ2lBZ0lDQWdJQ0FnSUNBZ0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0FnSUNBZ1VHOXBiblF6WkNCd0lEMGdaUzVEZFhKeVpXNTBVRzlwYm5RN0NpQWdJQ0FnSUNBZ0lDQWdJRkJ2YVc1ME1tUWdZM0FnUFNCbExsWnBaWGR3YjNKMExsZHZjbXhrVkc5RGJHbGxiblFvY0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobExsWnBaWGR3YjNKMExrZGxkRVp5ZFhOMGRXMU1hVzVsS0dOd0xsZ3NJR053TGxrc0lHOTFkQ0JNYVc1bElHeHBibVVwS1FvZ0lDQWdJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhVzVsTGtac2FYQW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkpoZVROa0lISmhlU0E5SUc1bGR5QlNZWGt6WkNoc2FXNWxMbEJ2YVc1MFFYUW9NQ2tzSUd4cGJtVXVSR2x5WldOMGFXOXVLVHNLQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjNWaWJHVWdZMnh2YzJWemRFOXVUV1Z6YUNBOUlHUnZkV0pzWlM1TllYaFdZV3gxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVOcGNtTnNaU0JvWldGa0lEMGdaR1ZtWVhWc2REc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFTnBjbU5zWlNCbVlXeHNiMlptSUQwZ1pHVm1ZWFZzZERzS0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSmxZV05vSUNoTlpYTm9JRzFsYzJnZ2FXNGdSMlYwVUdGcGJuUlRkWEptWVdObGN5Z3BLU0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IzVmliR1VnZENBOUlGSm9hVzV2TGtkbGIyMWxkSEo1TGtsdWRHVnljMlZqZEM1SmJuUmxjbk5sWTNScGIyNHVUV1Z6YUZKaGVTaHRaWE5vTENCeVlYa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBJRDQ5SURBcENpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiRzl6WlhOMFQyNU5aWE5vSUQwZ2REc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VHOXBiblF6WkNCb2FYUlFiMmx1ZENBOUlISmhlUzVRYjJsdWRFRjBLSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JOWlhOb1VHOXBiblFnYlhBZ1BTQnRaWE5vTGtOc2IzTmxjM1JOWlhOb1VHOXBiblFvYUdsMFVHOXBiblFzSUdSdmRXSnNaUzVOWVhoV1lXeDFaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlpsWTNSdmNqTmtJRzV2Y20wZ1BTQnRaWE5vTGs1dmNtMWhiRUYwS0cxd0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VHeGhibVVnYUdWaFpGQnNZVzVsSUQwZ2JtVjNJRkJzWVc1bEtHaHBkRkJ2YVc1MExDQnViM0p0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdWaFpDQTlJRzVsZHlCRGFYSmpiR1VvYUdWaFpGQnNZVzVsTENCb2FYUlFiMmx1ZEN3Z2JWOXphWHBsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1Gc2JHOW1aaUE5SUc1bGR5QkRhWEpqYkdVb2FHVmhaRkJzWVc1bExDQm9hWFJRYjJsdWRDd2diVjltWVd4c2IyWm1LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05zYjNObGMzUlBiazFsYzJnZ0lUMGdaRzkxWW14bExrMWhlRlpoYkhWbEtRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1V1UkdsemNHeGhlUzVFY21GM1EybHlZMnhsS0dobFlXUXNJRk5FTGtOdmJHOXlMa0pzZFdVc0lETXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRYMlpoYkd4dlptWWdJVDBnYlY5emFYcGxLUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlM1RWFYTndiR0Y1TGtSeVlYZERhWEpqYkdVb1ptRnNiRzltWml3Z1UwUXVRMjlzYjNJdVRHbG5hSFJIY21GNUxDQXlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRjl0YjNWelpVUnZkMjRwQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOXZiQ0J5WlhabGNuTmxJRDBnUlVZdVMyVjVZbTloY21RdVRXOWthV1pwWlhKekxraGhjMFpzWVdjb1JVWXVTMlY1Y3k1VGFHbG1kQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FYQndiSGxDY25WemFDaGxMbEpvYVc1dlJHOWpMQ0J3TENCeVpYWmxjbk5sS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnY0hKdmRHVmpkR1ZrSUdSdmRXSnNaU0JEYjIxd2RYUmxWbUZzZFdVb1pHOTFZbXhsSUdScGMzUXNJR1J2ZFdKc1pTQnpkR0Z5ZEN3Z1ltOXZiQ0J5WlhabGNuTmxLUW9nSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHOTFZbXhsSUhaaGJIVmxJRDBnYzNSaGNuUTdDaUFnSUNBZ0lDQWdJQ0FnSUdSdmRXSnNaU0JwYm1OeUlEMGdaR2x6ZENBOElHMWZjMmw2WlNBL0lHMWZjM1J5Wlc1bmRHZ2dPaUJ0WDJWaGMyVXVUM1YwS0VOdmJuWmxjblF1Vkc5VGFXNW5iR1VvYlY5bVlXeHNiMlptSUMwZ1pHbHpkQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlNBclBTQnlaWFpsY25ObElEOGdMV2x1WTNJZ09pQnBibU55T3dvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlIWmhiSFZsSUQ0Z2JWOXRZWGhXWVd4MVpTQS9JRzFmYldGNFZtRnNkV1VnT2lCMllXeDFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaU0E4SUcxZmJXbHVWbUZzZFdVZ1B5QnRYMjFwYmxaaGJIVmxJRG9nZG1Gc2RXVTdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBS0lDQWdJQ0FnSUNCd2NtOTBaV04wWldRZ1lXSnpkSEpoWTNRZ1NVVnVkVzFsY21GaWJHVThUV1Z6YUQ0Z1IyVjBVR0ZwYm5SVGRYSm1ZV05sY3lncE93b2dJQ0FnSUNBZ0lIQnliM1JsWTNSbFpDQmhZbk4wY21GamRDQjJiMmxrSUVGd2NHeDVRbkoxYzJnb1VtaHBibTlFYjJNZ1pHOWpMQ0JRYjJsdWRETmtJR0YwTENCaWIyOXNJSEpsZG1WeWMyVXBPd29nSUNBZ2ZRcDlDZz09IiwNCiAgICAgICAgICAgICJ1cmkiOiAicmhpbm9jb2RlOi8vL2NzaGFycC9saWJzL0JydXNoVG9vbHMvQmFzZUJydXNoLmNzIg0KICAgICAgICAgIH0NCiAgICAgICAgXQ0KICAgICAgfQ0KICAgIH0NCiAgXQ0KfQ==";
    static readonly dynamic s_projectServer = default;
    static readonly object s_project = default;

    static ProjectComponentPlugin()
    {
      s_projectServer = ProjectInterop.GetProjectServer();
      if (s_projectServer is null)
      {
        RhinoApp.WriteLine($"Error loading Grasshopper plugin. Missing Rhino3D platform");
        return;
      }

      // get project
      dynamic dctx = ProjectInterop.CreateInvokeContext();
      dctx.Inputs["projectAssembly"] = typeof(ProjectComponentPlugin).Assembly;
      dctx.Inputs["projectId"] = s_projectId;
      dctx.Inputs["projectData"] = s_projectData;

      object project = default;
      if (s_projectServer.TryInvoke("plugins/v1/deserialize", dctx)
            && dctx.Outputs.TryGet("project", out project))
      {
        // server reports errors
        s_project = project;
      }
    }

    public override GH_LoadingInstruction PriorityLoad()
    {
      if (AssemblyInfo.PluginCategoryIcon is SD.Bitmap icon)
      {
        Grasshopper.Instances.ComponentServer.AddCategoryIcon("RhinoBrush", icon);
      }
      Grasshopper.Instances.ComponentServer.AddCategorySymbolName("RhinoBrush", "RhinoBrush"[0]);

      return GH_LoadingInstruction.Proceed;
    }

    public static bool TryCreateScript(GH_Component ghcomponent, string serialized, out object script)
    {
      script = default;

      if (s_projectServer is null) return false;

      dynamic dctx = ProjectInterop.CreateInvokeContext();
      dctx.Inputs["component"] = ghcomponent;
      dctx.Inputs["project"] = s_project;
      dctx.Inputs["scriptData"] = serialized;

      if (s_projectServer.TryInvoke("plugins/v1/gh/deserialize", dctx))
      {
        return dctx.Outputs.TryGet("script", out script);
      }

      return false;
    }

    public static void DisposeScript(GH_Component ghcomponent, object script)
    {
      if (script is null)
        return;

      dynamic dctx = ProjectInterop.CreateInvokeContext();
      dctx.Inputs["component"] = ghcomponent;
      dctx.Inputs["project"] = s_project;
      dctx.Inputs["script"] = script;

      if (!s_projectServer.TryInvoke("plugins/v1/gh/dispose", dctx))
        throw new Exception("Error disposing Grasshopper script component");
    }
  }
}
